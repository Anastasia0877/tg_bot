from openai import AsyncOpenAI
from datetime import datetime

from aiogram import Router, F
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ErrorEvent, ChatMemberUpdated

from bot.db import Repo
from bot.db.models import User, Query
from bot.filters.user import CompletedFilter
from bot.structrures.bot import info_fields
from bot.structrures.callback_data import FieldData
from bot.structrures.enums import VarsEnum, ContentTypes
from bot.structrures.states import MakeQueryStates, AddMoneyStates, TalkAIStates

import bot.keyboards.user as kb

router = Router()

router.message.filter(CompletedFilter())
router.callback_query.filter(CompletedFilter())


@router.message(F.text == '/id')
async def user_id(message: Message):
    await message.answer(f"<code>{message.from_user.id}</code>")


@router.callback_query(F.data == 'make_query')
async def make_query(query: CallbackQuery):
    try:
        await query.message.edit_text(text="üîé –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–ª—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=kb.field_types())
    except:
        try:
            await query.message.delete()
        except:
            pass
        finally:
            await query.message.answer(text="üîé –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–ª—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",reply_markup=kb.field_types())


@router.callback_query(FieldData.filter())
async def field_data(query: CallbackQuery, state: FSMContext, callback_data: FieldData):
    await state.update_data(field_id=callback_data.id)
    await state.set_state(MakeQueryStates.value)
    await query.message.edit_text("üîé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —ç—Ç–æ–º –ø–æ–ª–µ, <b>–º–∏–Ω–∏—É–º 3 —Å–∏–º–≤–æ–ª–∞</b>:", reply_markup=kb.universal(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='cancel'))


@router.message(MakeQueryStates.value)
async def process_update(message: Message, repo: Repo, state: FSMContext):
    state_data = await state.get_data()
    if len(message.text) < 3:
        await message.answer("‚ö†Ô∏è –í –∑–∞–ø—Ä–æ—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º <b>3 —Å–∏–º–≤–æ–ª–∞</b>\n\n"
                             "üîé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —ç—Ç–æ–º –ø–æ–ª–µ –µ—â—ë —Ä–∞–∑:", reply_markup=kb.universal(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='cancel'))
        return

    result = await repo.get_info(state_data['field_id'], message.text)

    if result == []:
        await message.answer(f"üîé –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", reply_markup=kb.universal(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='cancel'))
    else:
        await state.set_state()
        await state.update_data(result=[info.id for info in result])
        await message.answer(f"üîé –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ <b>{len(result)}</b> —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–µ—Ä–≤—ã–π –∏–∑ –Ω–∏—Ö:\n\n"+"\n".join([f'<b>¬ª {info_fields[field]}</b>: {result[0].__getattribute__(field)}' for field in ["id", "login"]]), reply_markup=kb.universal("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "get_all_info"))


@router.callback_query(F.data == 'get_all_info')
async def get_all_info(query: CallbackQuery, repo: Repo, user: User, state: FSMContext):
    state_data = await state.get_data()
    await state.set_state()

    if not user.pay_forever:
        limit = await repo.get_var(VarsEnum.LIMIT)
        if user.pay_until and user.pay_until < datetime.now().astimezone():
            await query.message.edit_text("‚ùï<b>–£ –≤–∞—Å –∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞</b>. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Å–µ–π—á–∞—Å", reply_markup=kb.sub())
            return
        elif limit.int_value and await repo.get_count_queries(query.from_user.id) >= limit.int_value:
            # –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</b>. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Å–µ–π—á–∞—Å
            await query.message.edit_text("‚ùï<b>–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞", reply_markup=kb.sub())
            return

    res = await repo.get_info_by_ids(state_data['result'])
    repo.session.add(Query(user_id=query.from_user.id, result=state_data['result']))
    await repo.session.commit()

    await query.message.edit_text("\n\n".join("\n".join([f'<b>¬ª {info_fields[field]}</b>: {result.__getattribute__(field)}' for field in info_fields.keys()]) for result in res) + "\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /start")


@router.callback_query(F.data == 'pay_query')
async def pay_query(query: CallbackQuery, repo: Repo, user: User, state: FSMContext):
    if user.balance < 10:
        await state.clear()
        await query.message.edit_text("‚ùï<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>", reply_markup=kb.sub_payment())
    else:
        user.balance -= 10
        user.pay_forever = True
        await repo.session.commit()

        await get_all_info(query, repo, user, state)


@router.callback_query(F.data == 'pay_sub')
async def pay_sub(query: CallbackQuery, user: User):
    if user.pay_forever:
        text = "–±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
    elif not user.pay_forever:
        text = "–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
    elif user.pay_until > datetime.now().astimezone():
        text = user.pay_until - datetime.now().astimezone()
    else:
        text = "—É –≤–∞—Å –∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞"

    if user.pay_forever:
        kwargs = {"text": f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:  <b>{user.balance} —Ä—É–±–ª–µ–π</b>\n¬ª –î–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {text}", "reply_markup": kb.universal("–ù–∞–∑–∞–¥", "cancel")}
    else:
        kwargs = {"text": f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:  <b>{user.balance} —Ä—É–±–ª–µ–π</b>\n¬ª –î–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {text}\n\nüìç–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ", "reply_markup": kb.tariffs()}

    try:
        await query.message.edit_text(**kwargs)
    except:
        try:
            await query.message.delete()
        except:
            pass
        finally:
            await query.message.answer(**kwargs)


@router.callback_query(F.data == 'pay_unlimit')
async def pay_unlimit(query: CallbackQuery, repo: Repo, user: User):
    if user.balance < 500:
        await query.message.edit_text("‚ùï<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>", reply_markup=kb.payment())
    else:
        user.balance -= 500
        user.pay_forever = True
        await repo.session.commit()

        await query.message.edit_text("üéü <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ —Å—á—ë—Ç –±–∞–ª–∞–Ω—Å–∞!</b> –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


### –ü–õ–ê–¢–Ü–ñ–ö–ê –†–ê–ó
@router.callback_query(F.data == 'pay_now')
async def pay_now(query: CallbackQuery, repo: Repo, user: User):
    url = " "

    await query.message.edit_text(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {url}")


@router.callback_query(F.data == 'add_money')
async def add_money(query: CallbackQuery, state: FSMContext):
    await state.set_state(AddMoneyStates.amount)

    try:
        await query.message.edit_text("üí∞ –ù–∞ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?", reply_markup=kb.universal(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='cancel'))
    except:
        try:
            await query.message.delete()
        except:
            pass
        finally:
            await query.message.answer("üí∞ –ù–∞ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?", reply_markup=kb.universal(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='cancel'))


### –ü–õ–ê–¢–Ü–ñ–ö–ê –î–í–ê
@router.message(AddMoneyStates.amount)
async def add_amount(message: Message, state: FSMContext):
    num = int(message.text)


@router.callback_query(F.data == 'call_ai')
async def call_ai(query: CallbackQuery, state: FSMContext):
    try:
        await query.message.edit_text("ü§ñ –í—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É —Å –ò–ò", reply_markup=kb.universal("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä", "cancel"))
    except:
        try:
            await query.message.delete()
        except:
            pass
        finally:
            await query.message.answer("ü§ñ –í—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É —Å –ò–ò", reply_markup=kb.universal("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä", "cancel"))
    await state.set_state(TalkAIStates.talk)


@router.message(TalkAIStates.talk)
async def talk_ai(message: Message, state: FSMContext, client: AsyncOpenAI):
    msg = await message.answer("ü§ñ –ò–ò –¥—É–º–∞–µ—Ç...")
    state_data = await state.get_data()   # –î—ñ—Å—Ç–∞—î–º–æ –¥–∞–Ω—ñ, —è–∫—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —ñ–∑ –û–ó–£ —Ö–æ—Å—Ç–∞

    messages = state_data.get("messages")   # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    if not messages:   # –Ø–∫—â–æ —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–µ–º–∞—î, –ø–æ—á–∏–Ω–∞—î–º–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ó—ó
        messages = []

    messages.append(                                 #
        {"role": "user", "content": message.text},   # –ó–∞–ø–∏—Å—É—î–º–æ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    )                                                #
    chat = await client.chat.completions.create(   #
        messages=messages, model="gpt-3.5-turbo"   # –°—Ç–≤–æ—Ä—é—î–º–æ —á–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –®–Ü, –ø–µ—Ä–µ–¥–∞—é—á–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É(messages) —Ç–∞ –≤–µ—Ä—Å—ñ—é –®–Ü(model)
    )                                              #
    reply = chat.choices[0].message.content   # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ –®–Ü
    messages.append({"role": "assistant", "content": reply})   # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –®–Ü
    await state.update_data(messages=messages)   # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –≤ –û–ó–£ —Ö–æ—Å—Ç–∞ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –ø–æ–¥–∞–ª—å—à–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω–Ω—è—Ö
    await msg.edit_text(f"ü§ñ –û—Ç–≤–µ—Ç: <b>{reply}</b>", reply_markup=kb.universal("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä", "cancel"))
